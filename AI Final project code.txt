#!/usr/bin/env python
# coding: utf-8

# In[13]:


import re 
import tweepy 
from tweepy import OAuthHandler 
from textblob import TextBlob 
from csv import writer
from datetime import datetime
from datetime import date
import matplotlib.pyplot as plt
import csv
import os.path
  
class TwitterClient(object): 
    ''' 
    Generic Twitter Class for sentiment analysis. 
    '''
    def __init__(self): 
        ''' 
        Class constructor or initialization method. 
        '''
        # keys and tokens from the Twitter Dev Console 
        consumer_key = 'FWk7tteZElWAY1RGZuaX7U0nD'
        consumer_secret = 'ZQ2gliOiCyTgHPS99hOL3ICJbgJPFh0kYnnHffXbio9ULE5hZ2'
        access_token = '3118925831-Y1tJq0r5Zm7dLynKtYJLkSXfqjklkrHIA8Fv0IP'
        access_token_secret = 'eNWCnBxfScmuwMQbxYlwjqPKJrtkrg85vby3hEWDV2eT8'
  
        # attempt authentication 
        try: 
            # create OAuthHandler object 
            self.auth = OAuthHandler(consumer_key, consumer_secret) 
            # set access token and secret 
            self.auth.set_access_token(access_token, access_token_secret) 
            # create tweepy API object to fetch tweets 
            self.api = tweepy.API(self.auth) 
        except: 
            print("Error: Authentication Failed") 
  
    def clean_tweet(self, tweet): 
        ''' 
        Utility function to clean tweet text by removing links, special characters 
        using simple regex statements. 
        '''
        return ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", tweet).split()) 
  
    def get_tweet_sentiment(self, tweet): 
        ''' 
        Utility function to classify sentiment of passed tweet 
        using textblob's sentiment method 
        '''
        # create TextBlob object of passed tweet text 
        analysis = TextBlob(self.clean_tweet(tweet)) 
        # set sentiment 
        if analysis.sentiment.polarity > 0: 
            return 'positive'
        elif analysis.sentiment.polarity == 0: 
            return 'neutral'
        else: 
            return 'negative'
  
    def get_tweets(self, query, count = 10): 
        ''' 
        Main function to fetch tweets and parse them. 
        '''
        # empty list to store parsed tweets 
        tweets = [] 
  
        try: 
            # call twitter api to fetch tweets 
            fetched_tweets = self.api.search(q = query, count = count) 
  
            # parsing tweets one by one 
            for tweet in fetched_tweets: 
                # empty dictionary to store required params of a tweet 
                parsed_tweet = {} 
  
                # saving text of tweet 
                parsed_tweet['text'] = tweet.text 
                # saving sentiment of tweet 
                parsed_tweet['sentiment'] = self.get_tweet_sentiment(tweet.text) 
  
                # appending parsed tweet to tweets list 
                if tweet.retweet_count > 0: 
                    # if tweet has retweets, ensure that it is appended only once 
                    if parsed_tweet not in tweets: 
                        tweets.append(parsed_tweet) 
                else: 
                    tweets.append(parsed_tweet) 
  
            # return parsed tweets 
            return tweets 
  
        except tweepy.TweepError as e: 
            # print error (if any) 
            print("Error : " + str(e)) 
            
def append_list_as_row(file_name, list_of_elem):
        # Open file in append mode
            with open(file_name, 'a+', newline='') as write_obj:
        # Create a writer object from csv module
                csv_writer = writer(write_obj)
        # Add contents of list as last row in the csv file
                csv_writer.writerow(list_of_elem)
    # List of strings
    #row_contents = [32,'Shaun','Java','Tokyo','Morning']
    # Append a list as new line to an old csv file
    #append_list_as_row('students.csv', row_contents)

    
def main(): 
    # creating object of TwitterClient Class 
    api = TwitterClient() 
    # get the product input from user
    product=input("Enter the product name  ")
    
    # calling function to get tweets 
    tweets = api.get_tweets(query = product, count = 20000) 
  
    # picking positive tweets from tweets 
    ptweets = [tweet for tweet in tweets if tweet['sentiment'] == 'positive'] 
    # percentage of positive tweets 
    print("Positive tweets percentage: {} %".format(100*len(ptweets)/len(tweets))) 
    # picking negative tweets from tweets 
    ntweets = [tweet for tweet in tweets if tweet['sentiment'] == 'negative'] 
    # percentage of negative tweets 
    print("Negative tweets percentage: {} %".format(100*len(ntweets)/len(tweets))) 
    AI1=100*len(ntweets)/len(tweets)
    # percentage of neutral tweets 
    print("Neutral tweets percentage: {} %  ".format(100*(len(tweets)-(len(ntweets)+len(ptweets)))/len(tweets))) 
  
    # printing first 5 positive tweets 
    print("\n\nPositive tweets:") 
    for tweet in ptweets[:10]: 
        print(tweet['text']) 
  
    # printing first 10 negative tweets 
    print("\n\nNegative tweets:") 
    for tweet in ntweets[:10]: 
        print(tweet['text']) 
    #current date
    today = date.today()
    d0 = today.strftime("%Y%m%d")
    now = datetime.now()
    d2 = now.strftime("%H%M")
    d1=d0+d2
    
    #initializing Values of positive, negative and neutral data
    P=(100*len(ptweets)/len(tweets))
    N=(100*len(ntweets)/len(tweets))
    NU=(100*(len(tweets)-(len(ntweets)+len(ptweets)))/len(tweets))
    
    new_file_name = str(product+'.txt')
    file_exists = os.path.isfile(new_file_name) 
 
    if file_exists:
        open(new_file_name,"r")
    # do something
    else:
        open(new_file_name,"w+")
    # do something else
    #open(new_file_name,"w+")
    count = 0
    with open(new_file_name, 'r') as f:
        for line in f:
            count += 1
    #print("Total number of lines is:", count)
    
    
    # creating the file[product_name,positive,negative,nutral,date_time]
    row_contents = [product,(100*len(ptweets)/len(tweets)),(100*len(ntweets)/len(tweets)),(100*(len(tweets)-(len(ntweets)+len(ptweets)))/len(tweets)),d1,count]
    new_file_name=str(product+'.txt')
    append_list_as_row(new_file_name,row_contents)
    
    #ploting the graph
    x = []
    y = []
    z = []

    with open(new_file_name,'r') as csvfile:
        plots = csv.reader(csvfile, delimiter=',')
        for row in plots:
            x.append(float(row[1]))
            z.append(float(row[2]))
            y.append(float(row[5]))
            
            #print(z)

        plt.plot(y,x, label='Like Growth rate')
        plt.plot(y,z, label='Dislike Growth rate')
        plt.xlabel('Time')
        plt.ylabel('Percentage % ')
        plt.title('Growth of the Product/Company'+" "+ product)
        plt.legend()
        plt.show()
        
        # Data to plot
    labels = 'Like', 'Dislike', 'No_Opinion'
    sizes = [P,N,NU]
    colors = ['gold', 'yellowgreen', 'lightcoral']
    explode = (0.1, 0, 0)  # explode 1st slice

    # Plot
    plt.pie(sizes, explode=explode, labels=labels, colors=colors,
    autopct='%1.1f%%', shadow=True, startangle=140)

    plt.axis('equal')
    plt.show()
    
    
    
if __name__ == "__main__": 
    # calling main function 
    main()
    
    
    


# In[ ]:




